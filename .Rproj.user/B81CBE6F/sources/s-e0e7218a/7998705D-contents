# We start ctwas format and run a bunch of software on this data
# Will run each gwasname, weightname combination.
# check chrom before each run
# focus weight step needs internet connection

# software info
import os
from pathlib import Path
import csv
codedir = "~/causalTWAS/causal-TWAS/code/"
fusiondir = "/home/simingz/causalTWAS/fusion_twas-master/"
gcta = "/home/simingz/causalTWAS/gcta_1.93.2beta/gcta64"

# data (in ctwas format)
# gwas data: gwasdir/gwasname.snpgwas.txt.gz see 
# /home/simingz/causalTWAS/simulations/test_package_temp/test_simu2-5.snpgwas.txt.gz
# as an example, the effect allele is the alt allele.
# ld_pgenfs: a file lists plink pgen files, one row for one file, 1:22

ld_pgenfs = "/home/simingz/causalTWAS/simulations/test_package_temp/example_pgenfs.txt"
weightdir = "/home/simingz/ctwas/inst/extdata/example_fusion_weights/"
weightnames = ["Tissue"]
gwasdir = "/home/simingz/causalTWAS/simulations/test_package_temp/"
gwasnames = ["test" +'_simu'+ str(i) + "-" + str(j) for i in range(1,2) for j in range(1,2)]
gwasn = 20000

# eqtl summary statistics (for SMR)
eqtlSS = "/home/simingz/causalTWAS/simulations/test_package_temp/temp.eQTL.txt.gz" 

# output
outputdir = "/home/simingz/causalTWAS/simulations/test_package_temp/" # add / at end

rule all:
    input: 
        expand(outputdir + '{gwasname}.{weightname}.coloc.result', gwasname = gwasnames, weightname = weightnames) + expand(outputdir + '{gwasname}.{weightname}.smr', gwasname = gwasnames, weightname = weightnames) + expand(outputdir + '{gwasname}.{weightname}.focus.tsv', gwasname = gwasnames, weightname = weightnames) + expand(outputdir + '{gwasname}.{weightname}.mrjti.result', gwasname = gwasnames, weightname = weightnames)
        
rule plink2TOplink1:
    output:
        outputdir + os.path.basename(ld_pgenfs) + '.plink1'
    run:
        with open(ld_pgenfs, 'r') as f, open(output[0], 'w') as outf:
            files = f.read().splitlines()
            for i in range(1,23):
                fn, ext = os.path.splitext(files[i-1])
                if ext == ".pgen":
                    shell('plink2 --make-bed -pfile ' + fn + \
                          ' --out ' + os.path.basename(fn) + ".FUSION" + str(i))
                    outf.write(outputdir + "/" + os.path.basename(fn) + ".FUSION" + str(i) + '.bed\n')
                elif ext ==".bed":
                    outf.write(l)
                else:
                    print("Invalid genotype files")
                
        
rule fusion_coloc:
    input:
        gwasf = gwasdir + "{gwasname}.snpgwas.txt.gz",
        weightf = weightdir + '{weightname}.pos',
        ld_bedfs = rules.plink2TOplink1.output[0]
    output:
        outputdir + '{gwasname}.{weightname}.coloc.result'
    params:
        COLOC_P = 1e-4,
        GWASN = gwasn,
        model = 'lasso'
    run:
        # convert gwas file
        if os.path.splitext(input.gwasf)[1] == ".gz":
            shell('gunzip -c {input.gwasf} > {outputdir}/{wildcards.gwasname}.sumstats')
        else:
            shell('cp {input.gwasf} > {outputdir}/{wildcards.gwasname}.sumstats')
        
        # in ctwas, we count the alt allele, so that's the effect allele (A1)
        shell("sed -i -e '1s/id/SNP/' -e '1s/ref/A2/' \
        -e '1s/alt/A1/' -e '1s/t.value/Z/' {outputdir}/{wildcards.gwasname}.sumstats")
        
        # get ld_bedfs
        with open(input.ld_bedfs) as f:
            ld_bedfs = f.read().splitlines()
        ld_bedfs = [i.split(".FUSION")[0] for i in ld_bedfs]
        
        # run FUSION by chrom
        fusioncmd = \
        '''
        Rscript {fusiondir}/FUSION.assoc_test.R \
        --sumstats {wildcards.gwasname}.sumstats \
        --weights {weightdir}/{wildcards.weightname}.pos \
        --weights_dir {weightdir} \
        --ref_ld_chr {ld_bedf}.FUSION \
        --chr {chrom} \
        --coloc_P {params.COLOC_P} \
        --GWASN {params.GWASN} \
        --force_model {params.model} \
        --out {outputdir}/{wildcards.gwasname}.{wildcards.weightname}.{chrom}.coloc.dat \
        '''
        
        # no gene on chromosome 21 and 22. FUSION can't take it.
        # for chrom in range(1,23):
        for chrom in range(1,2):
            ld_bedf = ld_bedfs[chrom-1]
            print("Processing chr" + str(chrom))
            shell(fusioncmd)
            
        # combine
        combinecmd = \
        '''
        Rscript {codedir}/combine_FUSION_results_chrs.R \
        --coloc \
        --trait {wildcards.gwasname} \
        --weights {wildcards.weightname} \
        --outdir {outputdir} \
        '''
        shell(combinecmd)
        
        
rule eqtlTObesd:
    # SMR uses QTL summary statistics in BESD format
    input:
        eqtlss =eqtlSS
    output:
        besd = outputdir + os.path.basename(eqtlSS) + 'eqtl.besd'
    run: 
        # generate fastQTL format
        eqtlname = os.path.basename(eqtlSS)
        # (gene, SNP, distance in bp between the SNP and the gene, p-value and beta)
        shell("""zcat {eqtlSS}|awk -F'\\t' 'FNR > 1 {{print $19"\\t"$18"\\t"100"\\t"$7"\\t"$8}}' > {eqtlname}.fastqtl.temp.txt""")
        shell(""" awk '!a[$2]++' {eqtlname}.fastqtl.temp.txt > {eqtlname}.fastqtl.txt; rm {eqtlname}.fastqtl.temp.txt""") # remove duplicated SNP name
        # generate .besd
        outname = output.besd.split('.besd')[0]
        shell("~/causalTWAS/smr_Linux --eqtl-summary {eqtlname}.fastqtl.txt --fastqtl-nominal-format --make-besd --out {outname}")
        # generate and update .esi and .epi 
        # .esi (chr, SNP, 0, position, the effect allele, the other allele and frequency)
        # .epi (chr, probe ID, 0, position, gene ID and gene orientation)
        shell("""zcat {eqtlSS}|awk -F'\\t' 'FNR > 1 {{print $13"\\t"$18"\\t"0"\\t"$14"\\t"$16"\\t"$15"\\tNA"}}' > {outname}.temp.esi""")
        shell("""zcat {eqtlSS}|awk -F'\\t' 'FNR > 1 {{print $20"\\t"$19"\\t"0"\\t"$21"\\t"$19"\\t"23}}' > {outname}temp.epi; sort {outname}temp.epi| uniq > {outname}.temp.epi; rm {outname}temp.epi""")
        shell("~/causalTWAS/smr_Linux --beqtl-summary {outname} --update-esi {outname}.temp.esi")
        shell("~/causalTWAS/smr_Linux --beqtl-summary {outname} --update-epi {outname}.temp.epi")
        shell("rm {outname}.temp.epi; rm {outname}.temp.esi")
        
rule smr_heidi:
    input:
        gwasf = gwasdir + "{gwasname}.snpgwas.txt.gz",
        eqtlf = rules.eqtlTObesd.output[0],
        ld_bedfs = rules.plink2TOplink1.output[0]
    output:
        outputdir + '{gwasname}.{weightname}.smr'
    params:
        GWASN = gwasn
    run:
        # convert gwas file
        # SNP A1 A2 freq b se p N
        gwasf = outputdir + "/" + wildcards.gwasname + '.SMRsumstats'
        shell("echo -e 'SNP\tA1\tA2\tfreq\tb\tse\tp\tN' > {gwasf}")
        shell("""zcat {input.gwasf}|awk -F'\\t' 'FNR > 1 {{print $5"\\t"$3"\\t"$4"\\tNA\\t"$6"\\t"$7"\\t"$9"\\t"{params.GWASN}}}' >> {gwasf}""")
        
        
        # get ld_bedfs
        with open(input.ld_bedfs) as f:
            ld_bedfs = f.read().splitlines()
        ld_bedfs = [i.split(".bed")[0] for i in ld_bedfs]
        
        # eqtl summary stats file
        eqtlf = input.eqtlf.split('.besd')[0] 
        
        outputf = output[0].split('.smr')[0]
        
        # run SMR by chrom
        smrcmd = \
        '''
        ~/causalTWAS/smr_Linux --bfile {ld_bedf} --gwas-summary {gwasf} --beqtl-summary {eqtlf} --out {outputf}.{chrom} --thread-num 10 
        '''
        i =0
        for chrom in range(1,23):
            ld_bedf = ld_bedfs[chrom-1]
            print("Processing chr" + str(chrom))
            shell(smrcmd)
            if os.path.exists(outputf + '.'+ str(chrom) + '.smr'):
                i  = i+ 1
                if i==1:
                    shell('cp {outputf}.{chrom}.smr {output}')
                else:
                    shell("awk -F'\t' 'FNR > 1 {{print $0}}' {outputf}.{chrom}.smr>> {output}")
                shell('rm {outputf}.{chrom}.*')


rule FOCUSweight:
    input: 
        weightdir + '{weightname}.pos'
    output:
        outputdir + '{weightname}.db'
    run:
        shell('focus import {input} fusion --tissue {wildcards.weightname} --name {wildcards.weightname} --assay rnaseq --output {wildcards.weightname}')
    
rule FOCUS:
    input:
        gwasf = gwasdir + "{gwasname}.snpgwas.txt.gz",
        weightf = rules.FOCUSweight.output[0],
        ld_bedfs = rules.plink2TOplink1.output[0]
    params:
        GWASN = gwasn
    output:
        outputdir + '{gwasname}.{weightname}.focus.tsv'
    run:
        # convert gwas file
        if os.path.splitext(input.gwasf)[1] == ".gz":
            shell('gunzip -c {input.gwasf} > {outputdir}/{wildcards.gwasname}.sumstats.temp')
        else:
            shell('cp {input.gwasf} > {outputdir}/{wildcards.gwasname}.sumstats.temp')

        shell("sed -i -e '1s/id/SNP/' -e '1s/ref/A2/' \
        -e '1s/alt/A1/' -e '1s/t.value/Z/' \
        -e '1s/chrom/CHR/' -e '1s/pos/BP/' \
        -e '1s/PVALUE/P/' {outputdir}/{wildcards.gwasname}.sumstats.temp")
        
        shell('focus munge {outputdir}/{wildcards.gwasname}.sumstats.temp --N {params.GWASN} --output {outputdir}/{wildcards.gwasname}')
        shell('rm  {outputdir}/{wildcards.gwasname}.sumstats.temp')
        
        # get ld_bedfs
        with open(input.ld_bedfs) as f:
            ld_bedfs = f.read().splitlines()
        ld_bedfs = [i.split(".bed")[0] for i in ld_bedfs]
        
        # run focus
        outputf = output[0].split('.focus')[0]
        focuscmd = 'focus finemap {outputdir}/{wildcards.gwasname}.sumstats.gz {ld_bedf} {input.weightf} --chr {chrom} --out {outputf}.{chrom}'
        i = 0
        for chrom in range(1,3):
            ld_bedf = ld_bedfs[chrom-1]
            print("Processing chr" + str(chrom))
            shell(focuscmd)
            if os.path.exists(outputf + '.'+ str(chrom) + '.focus.tsv'):
                i  = i + 1
                if i==1:
                    shell('cp {outputf}.{chrom}.focus.tsv {output}')
                else:
                    shell("awk -F'\t' 'FNR > 1 {{print $0}}' {outputf}.{chrom}.focus.tsv >> {output}")
                    shell('rm {outputf}.*.focus.tsv')
        shell('cat {outputf}.*.log > {outputf}.log; rm {outputf}.*.log')
     
rule prune_ldsc:
    input:
        ld_bedfs = rules.plink2TOplink1.output[0]
    output:
        outputdir + os.path.basename(ld_pgenfs) + '.prunedldsc'
    run:
        # plink pruning using parameter described in paper
        with open(input.ld_bedfs, 'r') as f, open(output[0], 'w') as outf:
            files = f.read().splitlines()
            for i in range(1,23):
                fn, ext = os.path.splitext(files[i-1])
                shell('plink2 --bfile ' + fn + ' --indep-pairwise 50 5 0.2'\
                          ' --out ' + os.path.basename(fn)) 
                # get ldscore for pruned SNPs
                shell(gcta + ' --bfile ' + fn +  ' --ld-score --ld-wind 1000 --ld-rsq-cutoff 0.01 --out '\
                      + os.path.basename(fn)) 
                outf.write(outputdir + "/" + os.path.basename(fn) + ".prune.in\t"\
                    + outputdir + "/" + os.path.basename(fn) + ".score.ld\n")
                
rule MRJTI:
    input:
        ldinfo = rules.prune_ldsc.output[0],
        gwasf = gwasdir + "{gwasname}.snpgwas.txt.gz",
        eqtlss = eqtlSS,
        twasf = outputdir + '{gwasname}.{weightname}.coloc.result'
    output:
        outputdir + '{gwasname}.{weightname}.mrjti.result'
    params:
        twasfdr = 0.05
    run: 
        shell(' '.join(['Rscript {codedir}/run_MR-JTI.R', input.ldinfo, input.gwasf, input.eqtlss, input.twasf, output[0]])) 
        
        
        
        
            